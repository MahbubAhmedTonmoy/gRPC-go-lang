// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: student.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StudentServiceClient is the client API for StudentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudentServiceClient interface {
	Student(ctx context.Context, in *StudentRequest, opts ...grpc.CallOption) (*StudentResult, error)
	StudentManyTime(ctx context.Context, in *StudentRequest, opts ...grpc.CallOption) (StudentService_StudentManyTimeClient, error)
	LongStudent(ctx context.Context, opts ...grpc.CallOption) (StudentService_LongStudentClient, error)
	StudentEveryWhere(ctx context.Context, opts ...grpc.CallOption) (StudentService_StudentEveryWhereClient, error)
	StudentDeadLine(ctx context.Context, in *StudentRequest, opts ...grpc.CallOption) (*StudentResult, error)
}

type studentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentServiceClient(cc grpc.ClientConnInterface) StudentServiceClient {
	return &studentServiceClient{cc}
}

func (c *studentServiceClient) Student(ctx context.Context, in *StudentRequest, opts ...grpc.CallOption) (*StudentResult, error) {
	out := new(StudentResult)
	err := c.cc.Invoke(ctx, "/student.StudentService/Student", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentServiceClient) StudentManyTime(ctx context.Context, in *StudentRequest, opts ...grpc.CallOption) (StudentService_StudentManyTimeClient, error) {
	stream, err := c.cc.NewStream(ctx, &StudentService_ServiceDesc.Streams[0], "/student.StudentService/StudentManyTime", opts...)
	if err != nil {
		return nil, err
	}
	x := &studentServiceStudentManyTimeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StudentService_StudentManyTimeClient interface {
	Recv() (*StudentResult, error)
	grpc.ClientStream
}

type studentServiceStudentManyTimeClient struct {
	grpc.ClientStream
}

func (x *studentServiceStudentManyTimeClient) Recv() (*StudentResult, error) {
	m := new(StudentResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *studentServiceClient) LongStudent(ctx context.Context, opts ...grpc.CallOption) (StudentService_LongStudentClient, error) {
	stream, err := c.cc.NewStream(ctx, &StudentService_ServiceDesc.Streams[1], "/student.StudentService/LongStudent", opts...)
	if err != nil {
		return nil, err
	}
	x := &studentServiceLongStudentClient{stream}
	return x, nil
}

type StudentService_LongStudentClient interface {
	Send(*StudentRequest) error
	CloseAndRecv() (*StudentResult, error)
	grpc.ClientStream
}

type studentServiceLongStudentClient struct {
	grpc.ClientStream
}

func (x *studentServiceLongStudentClient) Send(m *StudentRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *studentServiceLongStudentClient) CloseAndRecv() (*StudentResult, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StudentResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *studentServiceClient) StudentEveryWhere(ctx context.Context, opts ...grpc.CallOption) (StudentService_StudentEveryWhereClient, error) {
	stream, err := c.cc.NewStream(ctx, &StudentService_ServiceDesc.Streams[2], "/student.StudentService/StudentEveryWhere", opts...)
	if err != nil {
		return nil, err
	}
	x := &studentServiceStudentEveryWhereClient{stream}
	return x, nil
}

type StudentService_StudentEveryWhereClient interface {
	Send(*StudentRequest) error
	Recv() (*StudentResult, error)
	grpc.ClientStream
}

type studentServiceStudentEveryWhereClient struct {
	grpc.ClientStream
}

func (x *studentServiceStudentEveryWhereClient) Send(m *StudentRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *studentServiceStudentEveryWhereClient) Recv() (*StudentResult, error) {
	m := new(StudentResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *studentServiceClient) StudentDeadLine(ctx context.Context, in *StudentRequest, opts ...grpc.CallOption) (*StudentResult, error) {
	out := new(StudentResult)
	err := c.cc.Invoke(ctx, "/student.StudentService/StudentDeadLine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudentServiceServer is the server API for StudentService service.
// All implementations must embed UnimplementedStudentServiceServer
// for forward compatibility
type StudentServiceServer interface {
	Student(context.Context, *StudentRequest) (*StudentResult, error)
	StudentManyTime(*StudentRequest, StudentService_StudentManyTimeServer) error
	LongStudent(StudentService_LongStudentServer) error
	StudentEveryWhere(StudentService_StudentEveryWhereServer) error
	StudentDeadLine(context.Context, *StudentRequest) (*StudentResult, error)
	mustEmbedUnimplementedStudentServiceServer()
}

// UnimplementedStudentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStudentServiceServer struct {
}

func (UnimplementedStudentServiceServer) Student(context.Context, *StudentRequest) (*StudentResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Student not implemented")
}
func (UnimplementedStudentServiceServer) StudentManyTime(*StudentRequest, StudentService_StudentManyTimeServer) error {
	return status.Errorf(codes.Unimplemented, "method StudentManyTime not implemented")
}
func (UnimplementedStudentServiceServer) LongStudent(StudentService_LongStudentServer) error {
	return status.Errorf(codes.Unimplemented, "method LongStudent not implemented")
}
func (UnimplementedStudentServiceServer) StudentEveryWhere(StudentService_StudentEveryWhereServer) error {
	return status.Errorf(codes.Unimplemented, "method StudentEveryWhere not implemented")
}
func (UnimplementedStudentServiceServer) StudentDeadLine(context.Context, *StudentRequest) (*StudentResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StudentDeadLine not implemented")
}
func (UnimplementedStudentServiceServer) mustEmbedUnimplementedStudentServiceServer() {}

// UnsafeStudentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudentServiceServer will
// result in compilation errors.
type UnsafeStudentServiceServer interface {
	mustEmbedUnimplementedStudentServiceServer()
}

func RegisterStudentServiceServer(s grpc.ServiceRegistrar, srv StudentServiceServer) {
	s.RegisterService(&StudentService_ServiceDesc, srv)
}

func _StudentService_Student_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).Student(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/student.StudentService/Student",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).Student(ctx, req.(*StudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentService_StudentManyTime_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StudentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StudentServiceServer).StudentManyTime(m, &studentServiceStudentManyTimeServer{stream})
}

type StudentService_StudentManyTimeServer interface {
	Send(*StudentResult) error
	grpc.ServerStream
}

type studentServiceStudentManyTimeServer struct {
	grpc.ServerStream
}

func (x *studentServiceStudentManyTimeServer) Send(m *StudentResult) error {
	return x.ServerStream.SendMsg(m)
}

func _StudentService_LongStudent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StudentServiceServer).LongStudent(&studentServiceLongStudentServer{stream})
}

type StudentService_LongStudentServer interface {
	SendAndClose(*StudentResult) error
	Recv() (*StudentRequest, error)
	grpc.ServerStream
}

type studentServiceLongStudentServer struct {
	grpc.ServerStream
}

func (x *studentServiceLongStudentServer) SendAndClose(m *StudentResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *studentServiceLongStudentServer) Recv() (*StudentRequest, error) {
	m := new(StudentRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StudentService_StudentEveryWhere_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StudentServiceServer).StudentEveryWhere(&studentServiceStudentEveryWhereServer{stream})
}

type StudentService_StudentEveryWhereServer interface {
	Send(*StudentResult) error
	Recv() (*StudentRequest, error)
	grpc.ServerStream
}

type studentServiceStudentEveryWhereServer struct {
	grpc.ServerStream
}

func (x *studentServiceStudentEveryWhereServer) Send(m *StudentResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *studentServiceStudentEveryWhereServer) Recv() (*StudentRequest, error) {
	m := new(StudentRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StudentService_StudentDeadLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).StudentDeadLine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/student.StudentService/StudentDeadLine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).StudentDeadLine(ctx, req.(*StudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StudentService_ServiceDesc is the grpc.ServiceDesc for StudentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StudentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "student.StudentService",
	HandlerType: (*StudentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Student",
			Handler:    _StudentService_Student_Handler,
		},
		{
			MethodName: "StudentDeadLine",
			Handler:    _StudentService_StudentDeadLine_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StudentManyTime",
			Handler:       _StudentService_StudentManyTime_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LongStudent",
			Handler:       _StudentService_LongStudent_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StudentEveryWhere",
			Handler:       _StudentService_StudentEveryWhere_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "student.proto",
}
